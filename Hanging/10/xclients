#! /bin/sh
#| -*- racket -*-
exec racket -tm "$0" -- ${1+"$@"}
|#
#lang racket

;; `main p [IP] < <n>-in.json` makes client players as specified in the first two pieces of STDIN
;; and points them to port p at IP, which defaults to LOCALHOST

;; ****************************************************************************************
;; THE TESTS DO __NOT__ USE MAIN TO GENERATE THE INTEGRATION TESTS BUT THE MANAGER FROM 9.
;; ****************************************************************************************

(provide main)

;; ---------------------------------------------------------------------------------------------------
(require (only-in "../8/xref" get-players))
(require "run-server-client.rkt")
(require (only-in "../3/xmap" game-map-validate))

(require Trains/Common/basic-constants)
(require Trains/Common/map-serialize)

(require "../get.rkt")

;; ---------------------------------------------------------------------------------------------------
(define (main p-str [ip LOCALHOST])
  (define port    (string->port-number p-str))
  (define gm      (get (compose (game-map-validate 'xclients) parse-game-map) 'xclients "Map"))
  (define players (get (make-players gm) 'xserver "JSON Player Instances"))
  (run-clients port players ip))

(define (make-players gm)
  (get-players gm MIN-PLAYER-PER-GAME +inf.0 player-kind? make-different-kind-of-player))

;                                     
;                                     
;     ;                    ;          
;     ;                    ;          
;   ;;;;;   ;;;    ;;;   ;;;;;   ;;;  
;     ;    ;;  ;  ;   ;    ;    ;   ; 
;     ;    ;   ;; ;        ;    ;     
;     ;    ;;;;;;  ;;;     ;     ;;;  
;     ;    ;          ;    ;        ; 
;     ;    ;      ;   ;    ;    ;   ; 
;     ;;;   ;;;;   ;;;     ;;;   ;;;  
;                                     
;                                     
;                                     

;; Tests with good players, cheating players, and misbehaving ones.
;; The configuration works for my `xclients` only. 

(module+ test
  (require (rename-in "../9/xmanager" [main xmanager]))
  (require (submod Trains/Common/map-serialize examples))
  (require Trains/Player/istrategy)
  (require Trains/Admin/referee)
  (require SwDev/Testing/testing)
  (require racket/runtime-path)
  (require json))

(module+ test ;; real players
  (start-at 0)
  (recording "ServerTests/")

  #; {GameMap N N N -> Test}
  ;; the numbers cannot be chosen freely
  ;; assumes that hold-10s are stupid, all buy-nows win 
  (define (check-manager gm hold-10# buy-now# cheat# pick-winners-&-elims [baddy% #false] [bad# 0])
    (define (make-player-names n strat% prefix)
      (build-list n (λ (i) (list (~a prefix (make-string i #\a)) strat%))))
    (define hold-10s (make-player-names hold-10# HOLD-10 "holdten"))
    (define buy-nows (make-player-names buy-now# BUY-NOW "buynoww"))
    (define cheaters (make-player-names cheat#   CHEAT   "cheater"))
    (define bad-players (build-list bad# (λ (i) (list (~a "abaddy" (make-string i #\b)) baddy%))))
    (define all-players (append hold-10s buy-nows cheaters bad-players))
    
    (r-check-equal? (λ () (xmanager make-players))
                    `[,gm ,all-players ,(make-list CARDS-PER-GAME "white")]
                    (pick-winners-&-elims hold-10s buy-nows cheaters bad-players)
                    (~a hold-10# buy-now# cheat# baddy% bad#))))

(module+ test 
  (define-runtime-path p-map2 "map-2.json")
  (define bm2 (with-input-from-file p-map2 read-json))
  (define (pick2 hold-10s buy-nows cheaters bad-players)
    `{[(,@(map first buy-nows)) ,(map first (append bad-players cheaters))]})

  (check-manager vtriangle-serialized 17 1 10 (λ _ (list ERR)))
  (check-manager bm2 27 1 12 pick2)

  (check-manager bm2 27 1 0 pick2 "player-bad-start" 1)
  (check-manager bm2 27 1 0 pick2 "player-bad-end" 1)
  (check-manager bm2 0 0 1  pick2 "player-bad-end" 1) ;; <--- this one must become a milestone 10 test
  (check-manager bm2 0 1 0  pick2 "player-bad-end" 3)
  (check-manager bm2 0 1 0  pick2 "player-bad-win" 1))

(module+ test 
  (define-runtime-path p-map3 "map-3.json")
  (define bm3 (with-input-from-file p-map3 read-json))
  (define winners3
    '("holdten"
      "holdtena"
      "holdtenaa"
      "holdtenaaa"
      "holdtenaaaaaaaaaaaaaaaa"
      "holdtenaaaaaaaaaaaaaaaaa"))
  (define ([pick3 [winners winners3] [losers values]] _hold-10s _buy-nows cheaters bad-players)
    `{[(,@winners) ,(losers (map first (append bad-players cheaters)))]})

  (check-manager bm3 17 1 10 pick2)
  (check-manager bm3 27 1 12 [pick3])

  (check-manager bm3 27 1 0 [pick3] "player-bad-start" 1)
  (check-manager bm3 27 1 0 [pick3 '("buynoww") (λ _ '())] "player-bad-end" 1)
  (check-manager bm3 0 0 1  [pick3 '()] "player-bad-end" 1) 
  (check-manager bm3 0 1 0  [pick3 '()] "player-bad-end" 3)
  (check-manager bm3 0 1 0  [pick3 '()] "player-bad-win" 1))
