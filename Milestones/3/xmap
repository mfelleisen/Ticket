#! /bin/sh
#| -*- racket -*-
exec racket -tm "$0" -- ${1+"$@"}
|#
#lang racket

;; test the reachability functionality: given two city names and a map, is there a path between them

(provide main)

(provide
 #; {Symbol -> (U False GameMap) -> GameMap}
 #; [(game-map-validate tag) gm]
 ;; validates that the parsed game map gm, if any, satisfies the testing constraints too (20, 40)
 ;; reports errors in terms of tag.  See Milestone 3 for the specification. 
 game-map-validate)

;; ---------------------------------------------------------------------------------------------------
(require Trains/Common/basic-constants)
(require Trains/Common/map)
(require Trains/Common/map-serialize)

(require Trains/Milestones/get)

(require SwDev/Testing/communication)

;; ---------------------------------------------------------------------------------------------------
(define (main)
  (define from (get city> 'xmap "JSON City Name"))
  (define to   (get city> 'xmap "JSON City Name"))
  (define gm   (get (compose (game-map-validate 'xmap) parse-game-map) 'xmap "JSON Map expected"))
  (validate from to gm)
  
  (send-message (game-map-connected? gm from to)))

(define (city> x) (and (city? x) (string->symbol x)))

(define ((game-map-validate tag) gm)
  (cond
    [(boolean? gm) #false]
    [else
     ;; if it is a game-map, the parser guarantees that there are no duplicate names and places
     ;; let's enforce size constraiints here 
     (unless (<= (length (game-map-cities gm)) CITY#) (error tag "too many cities"))
     (unless (<= (set-count (game-map-all-connections gm)) CONN#) (error tag "too many connections"))
     gm]))

#; {Symbol Symbol GameMap -> Void}
;; signal an error if the game-map doesn't contain the cities 
(define (validate from to gm)
  (define cities (game-map-cities gm))
  (unless (member from cities) (error 'xmap "invalid JSON: city on map expected, given ~e" from))
  (unless (member to cities) (error 'xmap "invalid JSON: city on map expected, given ~e" to)))

;                                          
;                                          
;                                          
;     ;                       ;            
;     ;                       ;            
;   ;;;;;;   ;;;;    ;;;;   ;;;;;;   ;;;;  
;     ;      ;  ;;  ;    ;    ;     ;    ; 
;     ;     ;    ;  ;         ;     ;      
;     ;     ;;;;;;  ;;;       ;     ;;;    
;     ;     ;          ;;;    ;        ;;; 
;     ;     ;            ;    ;          ; 
;     ;      ;      ;    ;    ;     ;    ; 
;      ;;;   ;;;;;   ;;;;      ;;;   ;;;;  
;                                          
;                                          
;                                          
;                                          

(module+ test
  (require (submod Trains/Admin/test-ref-on-players generate))
  
  (require SwDev/Testing/testing)

  (require json)
  (require rackunit))

;; protect the students from bad JSON test 
(module+ test
  ;; ill-foremd and invalid:
  (check-exn (regexp ILL) (λ () (with-input-from-string "{ \"board\" : [1" main)) "ill formed")
  (check-exn (regexp INV) (λ () (with-input-from-string "{ \"board\" : []}" main)) "invalid")
  (check-exn (regexp INV) (λ () (with-input-from-string "{ \"board\" : [],\"POSITION\":[0,0]}" main)))
  
  ;; invalid 
  (define (city-wrong f) (f (jsexpr->string "---") (jsexpr->string "A")))
  (check-exn #px"City" (λ () (with-input-from-string (city-wrong (λ (x y) (~a x " " y))) main)) "c1")
  (check-exn #px"City" (λ () (with-input-from-string (city-wrong (λ (y x) (~a x " " y))) main)) "c2")
  (check-exn exn:fail? (λ () (with-input-from-string (city-wrong (λ (y x) x)) main)) "c3")

  (define map-bad-city-1
    #<< eos
"C"
"B"
{
  "width" : 200,
  "height" : 200,
  "cities" : [["A", [10, 10]], ["B", [20, 20]]],
  "connections" : {}
}
 eos
    )

  (define map-bad-city-2
    #<< eos
"B"
"C"
{
  "width" : 200,
  "height" : 200,
  "cities" : [["A", [10, 10]], ["B", [20, 20]]],
  "connections" : {}
}
 eos
    )

  (check-exn exn:fail? (λ () (with-input-from-string map-bad-city-1 main)) "c4")

  (check-exn exn:fail? (λ () (with-input-from-string map-bad-city-2 main)) "c5")
  (define (bad ci cn)
    (define cities (build-list ci (compose string->symbol ~a)))
    (define gm (construct-random-map 200 200 cities cn))
    (define gm-ci (game-map-cities gm))
    (define gm-cn (game-map-all-connections gm))
    (with-input-from-string
        (string-join
         (map jsexpr->string
              (list
               (~a (first cities))
               (~a (first cities))
               (game-map->jsexpr gm)))
         " ")
      main))

  (check-exn #px"too many" (λ () (bad 21 10)) "too many cities")
  (check-exn #px"too many" (λ () (bad 10 55)) "too many conns"))

;; ---------------------------------------------------------------------------------------------------
;; sample tests for students, hand-rolled 
(module+ test 

  (define map-false
    #<< eos
"A"
"B"
{
  "width" : 200,
  "height" : 200,
  "cities" : [["A", [10, 10]], ["B", [20, 20]]],
  "connections" : {}
}
 eos
    )

  (define map-true
    #<< eos
"A"
"B"
{ "width" : 200,
  "height" : 200,
  "cities" : [["A", [10, 10]], ["B", [20, 20]]],
  "connections" : {"A" : {"B" : {"red" : 3} } }
}
 eos
    )

  (define (for-students gm-as-str expected msg)
    (define x (with-input-from-string gm-as-str (λ () (list (read-json) (read-json) (read-json)))))
    (r-check-equal? main x `{,expected} msg))

  (start-at 10)
  (recording "ForStudents/")

  (for-students map-false #f "simple false")
  (for-students map-true  #t "simple true"))

;; ---------------------------------------------------------------------------------------------------
;; test-fest tests, auto-generated 
(module+ test

  (start-at 0)
  (recording "Tests/")

  (define (for-test-fest gm-as-str expected msg)
    (define three (symbol->string (string->symbol (~a 3))))
    (define fourteen (symbol->string (string->symbol (~a 15))))
    (define x (with-input-from-string gm-as-str (λ () (list three fourteen (read-json)))))
    (r-check-equal? main x `{,expected} msg))
  
  (for-each for-test-fest
            (map (compose jsexpr->string game-map->jsexpr) tests)
            '[#t #t #t #t #f]
            (build-list 5 ~a)))
